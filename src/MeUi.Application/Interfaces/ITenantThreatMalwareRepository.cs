using MeUi.Application.Models.ThreatMalware;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace MeUi.Application.Interfaces;

public interface ITenantThreatMalwareRepository
{
    Task<List<MalwareFamilyCountDto>> GetMalwareFamilyDistributionAsync(Guid tenantId, DateTime start, DateTime end, CancellationToken cancellationToken = default);
    Task<List<MalwareFamilyTimePointDto>> GetMalwareFamilyEvolutionAsync(Guid tenantId, DateTime start, DateTime end, TimeSpan interval, CancellationToken cancellationToken = default);
    Task<List<MalwareCampaignDto>> GetMalwareCampaignAnalysisAsync(Guid tenantId, DateTime start, DateTime end, int limit = 25, CancellationToken cancellationToken = default);
    Task<List<MalwareGeographicDto>> GetMalwareGeographicDistributionAsync(Guid tenantId, DateTime start, DateTime end, int limit = 30, CancellationToken cancellationToken = default);
    Task<List<IOCTrackingDto>> GetIocTrackingAsync(Guid tenantId, DateTime start, DateTime end, int limit = 30, CancellationToken cancellationToken = default);
    Task<List<MalwarePortTargetDto>> GetMalwarePortTargetingAsync(Guid tenantId, DateTime start, DateTime end, int limit = 15, CancellationToken cancellationToken = default);
    Task<List<DetectionTypeTimePointDto>> GetZeroDayVsKnownDetectionAsync(Guid tenantId, DateTime start, DateTime end, TimeSpan interval, CancellationToken cancellationToken = default);
    Task<List<MalwareCommunicationDto>> GetMalwareCommunicationPatternsAsync(Guid tenantId, DateTime start, DateTime end, int limit = 40, CancellationToken cancellationToken = default);
}