using Mapster;
using MediatR;
using MeUi.Application.Exceptions;
using MeUi.Application.Interfaces;
using MeUi.Application.Models;
using MeUi.Domain.Entities;

namespace MeUi.Application.Features.MalwareFamilies.Queries.GetMalwareFamily;

public class GetMalwareFamilyQueryHandler : IRequestHandler<GetMalwareFamilyQuery, MalwareFamilyDto>
{
    private readonly IRepository<MalwareFamily> _malwareFamilyRepository;

    public GetMalwareFamilyQueryHandler(IRepository<MalwareFamily> malwareFamilyRepository)
    {
        _malwareFamilyRepository = malwareFamilyRepository;
    }

    public async Task<MalwareFamilyDto> Handle(GetMalwareFamilyQuery request, CancellationToken ct)
    {
        MalwareFamily malwareFamily = await _malwareFamilyRepository.GetByIdAsync(request.Id, ct) ??
            throw new NotFoundException($"Malware family with ID {request.Id} not found");

        return malwareFamily.Adapt<MalwareFamilyDto>();
    }
}
