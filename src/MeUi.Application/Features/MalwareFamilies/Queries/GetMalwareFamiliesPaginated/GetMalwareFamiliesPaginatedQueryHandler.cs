using Mapster;
using MediatR;
using MeUi.Application.Interfaces;
using MeUi.Application.Models;
using MeUi.Domain.Entities;
using System.Linq.Expressions;

namespace MeUi.Application.Features.MalwareFamilies.Queries.GetMalwareFamiliesPaginated;

public class GetMalwareFamiliesPaginatedQueryHandler : IRequestHandler<GetMalwareFamiliesPaginatedQuery, PaginatedDto<MalwareFamilyDto>>
{
    private readonly IRepository<MalwareFamily> _malwareFamilyRepository;

    public GetMalwareFamiliesPaginatedQueryHandler(IRepository<MalwareFamily> malwareFamilyRepository)
    {
        _malwareFamilyRepository = malwareFamilyRepository;
    }

    public async Task<PaginatedDto<MalwareFamilyDto>> Handle(GetMalwareFamiliesPaginatedQuery request, CancellationToken ct)
    {
        // Build search filter
        Expression<Func<MalwareFamily, bool>> predicate = malwareFamily => true;

        if (!string.IsNullOrWhiteSpace(request.Search))
        {
            string searchTerm = request.Search.ToLower();
            predicate = malwareFamily => malwareFamily.Name.ToLower().Contains(searchTerm);
        }

        // Build orderBy expression
        Expression<Func<MalwareFamily, object>> orderBy = GetOrderByExpression(request.SortBy);

        // Get paginated malware families using database-level filtering and pagination
        (IEnumerable<MalwareFamily> malwareFamilies, int totalItems) = await _malwareFamilyRepository.GetPaginatedAsync(
            predicate: predicate,
            orderBy: orderBy,
            orderByDescending: request.IsDescending,
            skip: (request.ValidatedPage - 1) * request.ValidatedPageSize,
            take: request.ValidatedPageSize,
            ct: ct
        );

        IEnumerable<MalwareFamilyDto> malwareFamilyDtos = malwareFamilies.Adapt<IEnumerable<MalwareFamilyDto>>();

        return new PaginatedDto<MalwareFamilyDto>
        {
            Items = malwareFamilyDtos,
            TotalItems = totalItems,
            Page = request.ValidatedPage,
            PageSize = request.ValidatedPageSize,
        };
    }

    private static Expression<Func<MalwareFamily, object>> GetOrderByExpression(string? sortBy)
    {
        return sortBy?.ToLowerInvariant() switch
        {
            "name" => malwareFamily => malwareFamily.Name,
            "createdat" => malwareFamily => malwareFamily.CreatedAt,
            "updatedat" => malwareFamily => malwareFamily.UpdatedAt ?? DateTime.MinValue,
            _ => malwareFamily => malwareFamily.Name // Default sort by Name
        };
    }
}
