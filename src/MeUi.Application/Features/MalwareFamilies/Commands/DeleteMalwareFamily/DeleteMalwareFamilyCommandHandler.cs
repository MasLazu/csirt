using MediatR;
using MeUi.Application.Exceptions;
using MeUi.Application.Interfaces;
using MeUi.Domain.Entities;

namespace MeUi.Application.Features.MalwareFamilies.Commands.DeleteMalwareFamily;

public class DeleteMalwareFamilyCommandHandler : IRequestHandler<DeleteMalwareFamilyCommand, Guid>
{
    private readonly IRepository<MalwareFamily> _malwareFamilyRepository;
    private readonly IRepository<ThreatEvent> _threatEventRepository;

    public DeleteMalwareFamilyCommandHandler(
        IRepository<MalwareFamily> malwareFamilyRepository,
        IRepository<ThreatEvent> threatEventRepository)
    {
        _malwareFamilyRepository = malwareFamilyRepository;
        _threatEventRepository = threatEventRepository;
    }

    public async Task<Guid> Handle(DeleteMalwareFamilyCommand request, CancellationToken ct)
    {
        MalwareFamily malwareFamily = await _malwareFamilyRepository.GetByIdAsync(request.Id, ct) ??
            throw new NotFoundException($"Malware family with ID {request.Id} not found");

        bool isReferenced = await _threatEventRepository.ExistsAsync(
            te => te.MalwareFamilyId == request.Id, ct);

        if (isReferenced)
        {
            throw new ConflictException($"Cannot delete malware family '{malwareFamily.Name}' because it is referenced by existing threat events");
        }

        await _malwareFamilyRepository.DeleteAsync(malwareFamily, ct);
        return malwareFamily.Id;
    }
}
