using Mapster;
using MediatR;
using MeUi.Application.Exceptions;
using MeUi.Application.Interfaces;
using MeUi.Domain.Entities;

namespace MeUi.Application.Features.MalwareFamilies.Commands.CreateMalwareFamily;

public class CreateMalwareFamilyCommandHandler : IRequestHandler<CreateMalwareFamilyCommand, Guid>
{
    private readonly IRepository<MalwareFamily> _malwareFamilyRepository;

    public CreateMalwareFamilyCommandHandler(IRepository<MalwareFamily> malwareFamilyRepository)
    {
        _malwareFamilyRepository = malwareFamilyRepository;
    }

    public async Task<Guid> Handle(CreateMalwareFamilyCommand request, CancellationToken ct)
    {
        string normalizedName = request.Name.Trim();

        if (await _malwareFamilyRepository.ExistsAsync(
            mf => mf.Name.ToLower() == normalizedName.ToLower(), ct))
        {
            throw new ConflictException($"Malware family with name '{normalizedName}' already exists");
        }

        MalwareFamily malwareFamily = new()
        {
            Id = Guid.NewGuid(),
            Name = normalizedName,
            CreatedAt = DateTime.UtcNow
        };

        await _malwareFamilyRepository.AddAsync(malwareFamily, ct);
        return malwareFamily.Id;
    }
}
