using MediatR;
using MeUi.Application.Exceptions;
using MeUi.Application.Interfaces;
using MeUi.Domain.Entities;

namespace MeUi.Application.Features.MalwareFamilies.Commands.UpdateMalwareFamily;

public class UpdateMalwareFamilyCommandHandler : IRequestHandler<UpdateMalwareFamilyCommand, Guid>
{
    private readonly IRepository<MalwareFamily> _malwareFamilyRepository;

    public UpdateMalwareFamilyCommandHandler(IRepository<MalwareFamily> malwareFamilyRepository)
    {
        _malwareFamilyRepository = malwareFamilyRepository;
    }

    public async Task<Guid> Handle(UpdateMalwareFamilyCommand request, CancellationToken ct)
    {
        MalwareFamily malwareFamily = await _malwareFamilyRepository.GetByIdAsync(request.Id, ct) ??
            throw new NotFoundException($"Malware family with ID {request.Id} not found");

        string normalizedName = request.Name.Trim();

        if (await _malwareFamilyRepository.ExistsAsync(
            mf => mf.Name.ToLower() == normalizedName.ToLower() && mf.Id != request.Id, ct))
        {
            throw new ConflictException($"Malware family with name '{normalizedName}' already exists");
        }

        malwareFamily.Name = normalizedName;
        malwareFamily.UpdatedAt = DateTime.UtcNow;

        await _malwareFamilyRepository.UpdateAsync(malwareFamily, ct);
        return malwareFamily.Id;
    }
}
