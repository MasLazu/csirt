using MeUi.Api.Endpoints;
using MeUi.Application.Features.MalwareFamilies.Queries.GetMalwareFamiliesPaginated;
using MeUi.Application.Interfaces;
using MeUi.Application.Models;
using MeUi.Api.Models;

namespace MeUi.Api.Endpoints.MalwareFamilies;

public class GetTenantMalwareFamiliesEndpoint : BaseTenantAuthorizedEndpoint<GetTenantMalwareFamiliesRequest, PaginatedDto<MalwareFamilyDto>, GetTenantMalwareFamiliesEndpoint>, ITenantPermissionProvider, IPermissionProvider
{
    public static string TenantPermission => "READ:MALWARE_FAMILY";
    public static string Permission => "READ:TENANT_MALWARE_FAMILY";

    public override void ConfigureEndpoint()
    {
        Get("api/v1/tenant/{tenantId}/malware-families");
        Description(x => x.WithTags("Tenant Malware Family")
            .WithSummary("Get paginated list of malware families for a tenant")
            .WithDescription("Retrieves a paginated list of malware families within the tenant context with optional search and sorting. Requires tenant-level READ:MALWARE_FAMILY permission."));
    }

    protected override async Task HandleAuthorizedAsync(GetTenantMalwareFamiliesRequest req, Guid userId, CancellationToken ct)
    {
        var query = new GetMalwareFamiliesPaginatedQuery()
        {
            Page = req.Page,
            PageSize = req.PageSize,
            Search = req.Search,
            SortBy = req.SortBy,
            SortDirection = req.SortDirection
        };

        PaginatedDto<MalwareFamilyDto> malwareFamilies = await Mediator.Send(query, ct);
        await SendSuccessAsync(malwareFamilies, $"Retrieved {malwareFamilies.Items.Count()} malware families successfully", ct);
    }
}
