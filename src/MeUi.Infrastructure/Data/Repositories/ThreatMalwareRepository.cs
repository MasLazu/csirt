using System.Data;
using Dapper;
using MeUi.Application.Interfaces;
using MeUi.Application.Models.ThreatMalware;
using Microsoft.Extensions.Configuration;
using Npgsql;

namespace MeUi.Infrastructure.Data.Repositories;

public class ThreatMalwareRepository : IThreatMalwareRepository
{
    private readonly string _connectionString;

    public ThreatMalwareRepository(IConfiguration configuration)
    {
        _connectionString = configuration.GetConnectionString("DefaultConnection")
            ?? throw new InvalidOperationException("DefaultConnection string is not configured.");
    }

    private IDbConnection CreateConnection()
    {
        var connection = new NpgsqlConnection(_connectionString);
        connection.Open();
        return connection;
    }

    public async Task<List<MalwareFamilyCountDto>> GetMalwareFamilyDistributionAsync(DateTime start, DateTime end, CancellationToken cancellationToken = default)
    {
        var sql = @"SELECT 
  COALESCE(mf.""Name"", 'Unknown/Unclassified') as ""MalwareFamily"",
  COUNT(*) as ""Events""
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
GROUP BY mf.""Name""
ORDER BY ""Events"" DESC";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareFamilyCountDto>(sql, new { start, end }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwareFamilyTimePointDto>> GetMalwareFamilyEvolutionAsync(DateTime start, DateTime end, CancellationToken cancellationToken = default)
    {
        var sql = @"SELECT 
  DATE_TRUNC('day', te.""Timestamp"") as ""Time"",
  COALESCE(mf.""Name"", 'Unknown') as ""MalwareFamily"",
  COUNT(*) as ""Events""
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
GROUP BY ""Time"", mf.""Name""
HAVING COUNT(*) > 5
ORDER BY ""Time""";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareFamilyTimePointDto>(sql, new { start, end }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwareCampaignDto>> GetMalwareCampaignAnalysisAsync(DateTime start, DateTime end, int limit = 25, CancellationToken cancellationToken = default)
    {
        var sql = @"SELECT 
  COALESCE(mf.""Name"", 'Unknown/Unclassified') as ""MalwareFamily"",
  COUNT(*) as ""TotalEvents"",
  COUNT(DISTINCT te.""SourceAddress"") as ""UniqueSources"",
  COUNT(DISTINCT te.""SourceCountryId"") as ""Countries"",
  COUNT(DISTINCT te.""DestinationPort"") as ""PortsTargeted"",
  COUNT(DISTINCT te.""Category"") as ""AttackCategories"",
  (COUNT(*) * COUNT(DISTINCT te.""SourceAddress"") * COUNT(DISTINCT te.""SourceCountryId"")) as ""ThreatScore"",
  MIN(te.""Timestamp"") as ""FirstSeen"",
  MAX(te.""Timestamp"") as ""LastSeen""
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
GROUP BY mf.""Name""
HAVING COUNT(*) > 5
ORDER BY ""ThreatScore"" DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareCampaignDto>(sql, new { start, end, limit }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwareGeographicDto>> GetMalwareGeographicAsync(DateTime start, DateTime end, int limit = 30, CancellationToken cancellationToken = default)
    {
        var sql = @"SELECT 
  COALESCE(mf.""Name"", 'Unknown') as ""MalwareFamily"",
  c.""Name"" as ""SourceCountry"",
  COUNT(*) as ""Events"",
  COUNT(DISTINCT te.""SourceAddress"") as ""UniqueIPs"",
  MIN(te.""Timestamp"") as ""FirstSeen"",
  MAX(te.""Timestamp"") as ""LastSeen""
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
JOIN ""Countries"" c ON te.""SourceCountryId"" = c.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
GROUP BY mf.""Name"", c.""Name""
HAVING COUNT(*) > 1
ORDER BY ""Events"" DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareGeographicDto>(sql, new { start, end, limit }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<IOCTrackingDto>> GetIocTrackingAsync(DateTime start, DateTime end, int limit = 30, CancellationToken cancellationToken = default)
    {
        var sql = @"SELECT 
  te.""SourceAddress""::text as ""IocIp"",
  COALESCE(mf.""Name"", 'Unknown') as ""AssociatedMalware"",
  c.""Name"" as ""Country"",
  ar.""Number"" as ""Asn"",
  COUNT(*) as ""Detections"",
  COUNT(DISTINCT te.""DestinationPort"") as ""PortsUsed"",
  MIN(te.""Timestamp"") as ""FirstSeen"",
  MAX(te.""Timestamp"") as ""LastSeen""
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
JOIN ""Countries"" c ON te.""SourceCountryId"" = c.""Id""
JOIN ""AsnRegistries"" ar ON te.""AsnRegistryId"" = ar.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
GROUP BY te.""SourceAddress""::text, mf.""Name"", c.""Name"", ar.""Number""
HAVING COUNT(*) > 1
ORDER BY ""Detections"" DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<IOCTrackingDto>(sql, new { start, end, limit }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwarePortTargetDto>> GetPortTargetingAsync(DateTime start, DateTime end, int limit = 15, CancellationToken cancellationToken = default)
    {
        var sql = @"SELECT 
  CAST(""DestinationPort"" as TEXT) as ""TargetPort"",
  COUNT(*) as ""MalwareAttacks""
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND ""DestinationPort"" IS NOT NULL
  AND mf.""Id"" IS NOT NULL
GROUP BY ""DestinationPort""
ORDER BY ""MalwareAttacks"" DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwarePortTargetDto>(sql, new { start, end, limit }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<DetectionTypeTimePointDto>> GetZeroDayVsKnownAsync(DateTime start, DateTime end, CancellationToken cancellationToken = default)
    {
        var sql = @"SELECT 
  DATE_TRUNC('day', te.""Timestamp"") as ""Time"",
  'Zero-Day/Unknown' as ""DetectionType"",
  COUNT(*) as ""Events""
FROM ""ThreatEvents"" te
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""MalwareFamilyId"" IS NULL
GROUP BY ""Time""

UNION ALL

SELECT 
  DATE_TRUNC('day', te.""Timestamp"") as ""Time"",
  'Known Malware' as ""DetectionType"",
  COUNT(*) as ""Events""
FROM ""ThreatEvents"" te
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""MalwareFamilyId"" IS NOT NULL
GROUP BY ""Time""
ORDER BY ""Time""";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<DetectionTypeTimePointDto>(sql, new { start, end }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwareCommunicationDto>> GetMalwareCommunicationAsync(DateTime start, DateTime end, int limit = 40, CancellationToken cancellationToken = default)
    {
        var sql = @"WITH malware_communication AS (
  SELECT 
    COALESCE(mf.""Name"", 'Unknown') as ""MalwareFamily"",
    te.""SourceAddress""::text as ""SourceIp"",
    te.""DestinationAddress""::text as ""DestinationAddress"",
    p.""Name"" as ""Protocol"",
    te.""DestinationPort""::text as ""DestinationPort"",
    COUNT(*) as ""Communications"",
    MIN(te.""Timestamp"") as ""FirstContact"",
    MAX(te.""Timestamp"") as ""LastContact""
  FROM ""ThreatEvents"" te
  LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
  JOIN ""Protocols"" p ON te.""ProtocolId"" = p.""Id""
  WHERE te.""DeletedAt"" IS NULL 
    AND te.""Timestamp"" BETWEEN @start AND @end
    AND te.""DestinationAddress"" IS NOT NULL
  GROUP BY mf.""Name"", te.""SourceAddress""::text, te.""DestinationAddress""::text, p.""Name"", te.""DestinationPort""::text
  HAVING COUNT(*) > 3
)
SELECT 
  ""MalwareFamily"",
  ""SourceIp"" as ""SourceIp"",
  ""DestinationAddress"" as ""CncServer"",
  ""Protocol"",
  ""DestinationPort"" as ""Port"",
  ""Communications"",
  ""FirstContact"",
  ""LastContact""
FROM malware_communication
ORDER BY ""Communications"" DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareCommunicationDto>(sql, new { start, end, limit }, commandTimeout: 300);
        return result.AsList();
    }
}
