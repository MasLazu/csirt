using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Dapper;
using MeUi.Application.Interfaces;
using MeUi.Application.Models.ThreatMalware;
using Microsoft.Extensions.Configuration;
using Npgsql;

namespace MeUi.Infrastructure.Data.Repositories;

public class TenantThreatMalwareRepository : ITenantThreatMalwareRepository
{
    private readonly string _connectionString;

    public TenantThreatMalwareRepository(IConfiguration configuration)
    {
        _connectionString = configuration.GetConnectionString("DefaultConnection")
            ?? throw new InvalidOperationException("DefaultConnection string is not configured.");
    }

    private IDbConnection CreateConnection()
    {
        var connection = new NpgsqlConnection(_connectionString);
        connection.Open();
        return connection;
    }

    public async Task<List<MalwareFamilyCountDto>> GetMalwareFamilyDistributionAsync(Guid tenantId, DateTime start, DateTime end, CancellationToken cancellationToken = default)
    {
        var sql = @"
SELECT 
  COALESCE(mf.""Name"", 'Unknown/Unclassified') as MalwareFamily,
  COUNT(*) as Events
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
GROUP BY mf.""Name""
ORDER BY Events DESC";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareFamilyCountDto>(sql, new { start, end, tenantId }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwareFamilyTimePointDto>> GetMalwareFamilyEvolutionAsync(Guid tenantId, DateTime start, DateTime end, TimeSpan interval, CancellationToken cancellationToken = default)
    {
        var intervalStr = interval.TotalDays >= 1 ? "day" : interval.TotalHours >= 1 ? "hour" : "minute";
        var sql = $@"
SELECT 
  date_trunc('{intervalStr}', te.""Timestamp"") as Time,
  COALESCE(mf.""Name"", 'Unknown') as MalwareFamily,
  COUNT(*) as Events
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
GROUP BY Time, mf.""Name""
HAVING COUNT(*) > 5
ORDER BY Time";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareFamilyTimePointDto>(sql, new { start, end, tenantId }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwareCampaignDto>> GetMalwareCampaignAnalysisAsync(Guid tenantId, DateTime start, DateTime end, int limit = 25, CancellationToken cancellationToken = default)
    {
        var sql = @"
SELECT 
  COALESCE(mf.""Name"", 'Unknown/Unclassified') as MalwareFamily,
  COUNT(*) as TotalEvents,
  COUNT(DISTINCT te.""SourceAddress"") as UniqueSources,
  COUNT(DISTINCT te.""SourceCountryId"") as Countries,
  COUNT(DISTINCT te.""DestinationPort"") as PortsTargeted,
  COUNT(DISTINCT te.""Category"") as AttackCategories,
  (COUNT(*) * COUNT(DISTINCT te.""SourceAddress"") * COUNT(DISTINCT te.""SourceCountryId"")) as ThreatScore,
  MIN(te.""Timestamp"") as FirstSeen,
  MAX(te.""Timestamp"") as LastSeen
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
GROUP BY mf.""Name""
HAVING COUNT(*) > 5
ORDER BY ThreatScore DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareCampaignDto>(sql, new { start, end, tenantId, limit }, commandTimeout: 300);
        return result.AsList();
    } 
   public async Task<List<MalwareGeographicDto>> GetMalwareGeographicDistributionAsync(Guid tenantId, DateTime start, DateTime end, int limit = 30, CancellationToken cancellationToken = default)
    {
        var sql = @"
SELECT 
  COALESCE(mf.""Name"", 'Unknown') as MalwareFamily,
  c.""Name"" as SourceCountry,
  COUNT(*) as Events,
  COUNT(DISTINCT te.""SourceAddress"") as UniqueIPs,
  MIN(te.""Timestamp"") as FirstSeen,
  MAX(te.""Timestamp"") as LastSeen
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
JOIN ""Countries"" c ON te.""SourceCountryId"" = c.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
GROUP BY mf.""Name"", c.""Name""
HAVING COUNT(*) > 1
ORDER BY Events DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareGeographicDto>(sql, new { start, end, tenantId, limit }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<IOCTrackingDto>> GetIocTrackingAsync(Guid tenantId, DateTime start, DateTime end, int limit = 30, CancellationToken cancellationToken = default)
    {
        var sql = @"
SELECT 
  CAST(te.""SourceAddress"" as TEXT) as IocIp,
  COALESCE(mf.""Name"", 'Unknown') as AssociatedMalware,
  c.""Name"" as Country,
  CAST(ar.""Number"" as TEXT) as Asn,
  COUNT(*) as Detections,
  COUNT(DISTINCT te.""DestinationPort"") as PortsUsed,
  MIN(te.""Timestamp"") as FirstSeen,
  MAX(te.""Timestamp"") as LastSeen
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
JOIN ""Countries"" c ON te.""SourceCountryId"" = c.""Id""
JOIN ""AsnRegistries"" ar ON te.""AsnRegistryId"" = ar.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
GROUP BY te.""SourceAddress"", mf.""Name"", c.""Name"", ar.""Number""
HAVING COUNT(*) > 1
ORDER BY Detections DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<IOCTrackingDto>(sql, new { start, end, tenantId, limit }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwarePortTargetDto>> GetMalwarePortTargetingAsync(Guid tenantId, DateTime start, DateTime end, int limit = 15, CancellationToken cancellationToken = default)
    {
        var sql = @"
SELECT 
  CAST(""DestinationPort"" as TEXT) as TargetPort,
  COUNT(*) as MalwareAttacks
FROM ""ThreatEvents"" te
LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND ""DestinationPort"" IS NOT NULL
  AND mf.""Id"" IS NOT NULL
  AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
GROUP BY ""DestinationPort""
ORDER BY MalwareAttacks DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwarePortTargetDto>(sql, new { start, end, tenantId, limit }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<DetectionTypeTimePointDto>> GetZeroDayVsKnownDetectionAsync(Guid tenantId, DateTime start, DateTime end, TimeSpan interval, CancellationToken cancellationToken = default)
    {
        var intervalStr = interval.TotalDays >= 1 ? "day" : interval.TotalHours >= 1 ? "hour" : "minute";
        var sql = $@"
SELECT 
  date_trunc('{intervalStr}', te.""Timestamp"") as Time,
  'Zero-Day/Unknown' as DetectionType,
  COUNT(*) as Events
FROM ""ThreatEvents"" te
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""MalwareFamilyId"" IS NULL
  AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
GROUP BY Time

UNION ALL

SELECT 
  date_trunc('{intervalStr}', te.""Timestamp"") as Time,
  'Known Malware' as DetectionType,
  COUNT(*) as Events
FROM ""ThreatEvents"" te
WHERE te.""DeletedAt"" IS NULL 
  AND te.""Timestamp"" BETWEEN @start AND @end
  AND te.""MalwareFamilyId"" IS NOT NULL
  AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
GROUP BY Time
ORDER BY Time";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<DetectionTypeTimePointDto>(sql, new { start, end, tenantId }, commandTimeout: 300);
        return result.AsList();
    }

    public async Task<List<MalwareCommunicationDto>> GetMalwareCommunicationPatternsAsync(Guid tenantId, DateTime start, DateTime end, int limit = 40, CancellationToken cancellationToken = default)
    {
        var sql = @"
WITH malware_communication AS (
  SELECT 
    COALESCE(mf.""Name"", 'Unknown') as ""MalwareFamily"",
    ""SourceAddress"",
    ""DestinationAddress"",
    p.""Name"" as ""Protocol"",
    ""DestinationPort"",
    COUNT(*) as ""Communications"",
    MIN(te.""Timestamp"") as ""FirstContact"",
    MAX(te.""Timestamp"") as ""LastContact""
  FROM ""ThreatEvents"" te
  LEFT JOIN ""MalwareFamilies"" mf ON te.""MalwareFamilyId"" = mf.""Id""
  JOIN ""Protocols"" p ON te.""ProtocolId"" = p.""Id""
  WHERE te.""DeletedAt"" IS NULL 
    AND te.""Timestamp"" BETWEEN @start AND @end
    AND ""DestinationAddress"" IS NOT NULL
    AND te.""AsnRegistryId"" IN (SELECT ""AsnRegistryId"" FROM ""TenantAsnRegistries"" WHERE ""TenantId"" = @tenantId AND ""DeletedAt"" IS NULL)
  GROUP BY mf.""Name"", ""SourceAddress"", ""DestinationAddress"", p.""Name"", ""DestinationPort""
  HAVING COUNT(*) > 3
)
SELECT 
  ""MalwareFamily"",
  ""SourceAddress"" as SourceIp,
  ""DestinationAddress"" as CncServer,
  ""Protocol"",
  CAST(""DestinationPort"" as TEXT) as Port,
  ""Communications"",
  ""FirstContact"",
  ""LastContact""
FROM malware_communication
ORDER BY ""Communications"" DESC
LIMIT @limit";

        using var connection = CreateConnection();
        var result = await connection.QueryAsync<MalwareCommunicationDto>(sql, new { start, end, tenantId, limit }, commandTimeout: 300);
        return result.AsList();
    }
}