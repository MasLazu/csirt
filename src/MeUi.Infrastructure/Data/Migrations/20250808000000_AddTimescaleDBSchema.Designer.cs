// <auto-generated />
using System;
using System.Net;
using MeUi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeUi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250808000000_AddTimescaleDBSchema")]
    partial class AddTimescaleDBSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            // ASN Info entity
            modelBuilder.Entity("MeUi.Domain.Entities.AsnInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Asn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("asn");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex("Asn")
                        .IsUnique()
                        .HasDatabaseName("idx_asn_info_asn_unique");

                    b.ToTable("asn_info", (string)null);
                });

            // Country entity
            modelBuilder.Entity("MeUi.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("idx_countries_code_unique");

                    b.ToTable("countries", (string)null);
                });

            // Protocol entity
            modelBuilder.Entity("MeUi.Domain.Entities.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_protocols_name_unique");

                    b.ToTable("protocols", (string)null);
                });

            // MalwareFamily entity
            modelBuilder.Entity("MeUi.Domain.Entities.MalwareFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_malware_families_name_unique");

                    b.ToTable("malware_families", (string)null);
                });

            // ThreatIntelligence entity
            modelBuilder.Entity("MeUi.Domain.Entities.ThreatIntelligence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AsnId")
                        .HasColumnType("integer")
                        .HasColumnName("asn_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<IPAddress>("DestinationAddress")
                        .HasColumnType("inet")
                        .HasColumnName("destination_address");

                    b.Property<int?>("DestinationCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("destination_country_id");

                    b.Property<int?>("DestinationPort")
                        .HasColumnType("integer")
                        .HasColumnName("destination_port");

                    b.Property<int?>("MalwareFamilyId")
                        .HasColumnType("integer")
                        .HasColumnName("malware_family_id");

                    b.Property<int?>("ProtocolId")
                        .HasColumnType("integer")
                        .HasColumnName("protocol_id");

                    b.Property<IPAddress>("SourceAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("source_address");

                    b.Property<int?>("SourceCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("source_country_id");

                    b.Property<int?>("SourcePort")
                        .HasColumnType("integer")
                        .HasColumnName("source_port");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamptz")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AsnId", "Category", "Timestamp")
                        .HasDatabaseName("idx_threat_asn_category_time");

                    b.HasIndex("Category", "Timestamp")
                        .HasDatabaseName("idx_threat_category_time");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("idx_threat_deleted_at")
                        .HasFilter("deleted_at IS NOT NULL");

                    b.HasIndex("DestinationCountryId", "Timestamp")
                        .HasDatabaseName("idx_threat_dest_country_time");

                    b.HasIndex("MalwareFamilyId", "Timestamp")
                        .HasDatabaseName("idx_threat_malware_time")
                        .HasFilter("malware_family_id IS NOT NULL");

                    b.HasIndex("ProtocolId", "Timestamp")
                        .HasDatabaseName("idx_threat_protocol_time")
                        .HasFilter("protocol_id IS NOT NULL");

                    b.HasIndex("SourceCountryId", "ProtocolId", "Timestamp")
                        .HasDatabaseName("idx_threat_country_protocol_time");

                    b.HasIndex("SourceCountryId", "Timestamp")
                        .HasDatabaseName("idx_threat_source_country_time");

                    b.HasIndex("SourcePort", "DestinationPort", "Timestamp")
                        .HasDatabaseName("idx_threat_ports_time")
                        .HasFilter("source_port IS NOT NULL OR destination_port IS NOT NULL");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_threat_timestamp_desc");

                    b.HasIndex("Timestamp", "AsnId")
                        .HasDatabaseName("idx_threat_timestamp_asn");

                    b.HasIndex("Timestamp", "SourceAddress")
                        .HasDatabaseName("idx_threat_timestamp_source");

                    b.ToTable("threat_intelligence", (string)null);
                });

            // Configure relationships
            modelBuilder.Entity("MeUi.Domain.Entities.ThreatIntelligence", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.AsnInfo", "AsnInfo")
                        .WithMany("ThreatIntelligences")
                        .HasForeignKey("AsnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_threat_asn");

                    b.HasOne("MeUi.Domain.Entities.Country", "DestinationCountry")
                        .WithMany("DestinationThreats")
                        .HasForeignKey("DestinationCountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_threat_dest_country");

                    b.HasOne("MeUi.Domain.Entities.MalwareFamily", "MalwareFamily")
                        .WithMany("ThreatIntelligences")
                        .HasForeignKey("MalwareFamilyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_threat_malware_family");

                    b.HasOne("MeUi.Domain.Entities.Protocol", "Protocol")
                        .WithMany("ThreatIntelligences")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_threat_protocol");

                    b.HasOne("MeUi.Domain.Entities.Country", "SourceCountry")
                        .WithMany("SourceThreats")
                        .HasForeignKey("SourceCountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_threat_source_country");

                    b.Navigation("AsnInfo");

                    b.Navigation("DestinationCountry");

                    b.Navigation("MalwareFamily");

                    b.Navigation("Protocol");

                    b.Navigation("SourceCountry");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.AsnInfo", b =>
                {
                    b.Navigation("ThreatIntelligences");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Country", b =>
                {
                    b.Navigation("DestinationThreats");

                    b.Navigation("SourceThreats");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.MalwareFamily", b =>
                {
                    b.Navigation("ThreatIntelligences");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Protocol", b =>
                {
                    b.Navigation("ThreatIntelligences");
                });
#pragma warning restore 612, 618
        }
    }
}