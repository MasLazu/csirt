// <auto-generated />
using System;
using System.Net;
using MeUi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeUi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250809061027_AddTenantUserPasswordWithCorrectTableNames")]
    partial class AddTenantUserPasswordWithCorrectTableNames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeUi.Domain.Entities.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DeletedAt");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.AsnInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Asn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("asn");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex("Asn")
                        .IsUnique()
                        .HasDatabaseName("idx_asn_info_asn_unique");

                    b.ToTable("asn_info", (string)null);
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("idx_countries_code_unique");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("MeUi.Domain.Entities.LoginMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DeletedAt");

                    b.ToTable("LoginMethods");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.MalwareFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_malware_families_name_unique");

                    b.ToTable("malware_families", (string)null);
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("PageGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PageGroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PageGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DeletedAt");

                    b.ToTable("PageGroups");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PagePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PageId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PageId", "PermissionId")
                        .IsUnique();

                    b.ToTable("PagePermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserLoginMethodId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("UserLoginMethodId")
                        .IsUnique();

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResourceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActionCode");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ResourceCode", "ActionCode")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_protocols_name_unique");

                    b.ToTable("protocols", (string)null);
                });

            modelBuilder.Entity("MeUi.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DeletedAt");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DeletedAt");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactEmail");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantAsn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AsnId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AssignedByTenantUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AsnId");

                    b.HasIndex("AssignedByTenantUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "AsnId")
                        .IsUnique();

                    b.ToTable("TenantAsns");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTenantAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsTenantAdmin");

                    b.HasIndex("TenantId");

                    b.HasIndex("Email", "TenantId")
                        .IsUnique();

                    b.HasIndex("Username", "TenantId")
                        .IsUnique();

                    b.ToTable("TenantUsers");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserLoginMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("LoginMethodCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login_method_code");

                    b.Property<Guid>("LoginMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("login_method_id");

                    b.Property<Guid>("TenantUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_user_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("LoginMethodId");

                    b.HasIndex("TenantUserId");

                    b.HasIndex("TenantUserId", "LoginMethodCode")
                        .IsUnique();

                    b.ToTable("tenant_user_login_methods", (string)null);
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_salt");

                    b.Property<Guid>("TenantUserLoginMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_user_login_method_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantUserLoginMethodId")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_user_passwords_tenant_user_login_method_id");

                    b.ToTable("tenant_user_passwords", (string)null);
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("TenantUserId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("TenantUserRefreshTokens");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantUserId");

                    b.HasIndex("TenantUserId", "RoleId")
                        .IsUnique();

                    b.ToTable("TenantUserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.ThreatIntelligence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamptz")
                        .HasColumnName("timestamp");

                    b.Property<int>("AsnId")
                        .HasColumnType("integer")
                        .HasColumnName("asn_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<IPAddress>("DestinationAddress")
                        .HasColumnType("inet")
                        .HasColumnName("destination_address");

                    b.Property<int?>("DestinationCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("destination_country_id");

                    b.Property<int?>("DestinationPort")
                        .HasColumnType("integer")
                        .HasColumnName("destination_port");

                    b.Property<int?>("MalwareFamilyId")
                        .HasColumnType("integer")
                        .HasColumnName("malware_family_id");

                    b.Property<int?>("ProtocolId")
                        .HasColumnType("integer")
                        .HasColumnName("protocol_id");

                    b.Property<IPAddress>("SourceAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("source_address");

                    b.Property<int?>("SourceCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("source_country_id");

                    b.Property<int?>("SourcePort")
                        .HasColumnType("integer")
                        .HasColumnName("source_port");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id", "Timestamp");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("idx_threat_deleted_at")
                        .HasFilter("deleted_at IS NOT NULL");

                    b.HasIndex("DestinationAddress")
                        .HasDatabaseName("idx_threat_dest_addr");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DestinationAddress"), "hash");

                    b.HasIndex("SourceAddress")
                        .HasDatabaseName("idx_threat_source_addr");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SourceAddress"), "hash");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_threat_timestamp_desc");

                    b.HasIndex("Category", "Timestamp")
                        .HasDatabaseName("idx_threat_category_time");

                    b.HasIndex("DestinationCountryId", "Timestamp")
                        .HasDatabaseName("idx_threat_dest_country_time");

                    b.HasIndex("MalwareFamilyId", "Timestamp")
                        .HasDatabaseName("idx_threat_malware_time")
                        .HasFilter("malware_family_id IS NOT NULL");

                    b.HasIndex("ProtocolId", "Timestamp")
                        .HasDatabaseName("idx_threat_protocol_time")
                        .HasFilter("protocol_id IS NOT NULL");

                    b.HasIndex("SourceCountryId", "Timestamp")
                        .HasDatabaseName("idx_threat_source_country_time");

                    b.HasIndex("Timestamp", "AsnId")
                        .HasDatabaseName("idx_threat_timestamp_asn");

                    b.HasIndex("Timestamp", "SourceAddress")
                        .HasDatabaseName("idx_threat_timestamp_source");

                    b.HasIndex("AsnId", "Category", "Timestamp")
                        .HasDatabaseName("idx_threat_asn_category_time");

                    b.HasIndex("SourceCountryId", "ProtocolId", "Timestamp")
                        .HasDatabaseName("idx_threat_country_protocol_time");

                    b.HasIndex("SourcePort", "DestinationPort", "Timestamp")
                        .HasDatabaseName("idx_threat_ports_time")
                        .HasFilter("source_port IS NOT NULL OR destination_port IS NOT NULL");

                    b.ToTable("threat_intelligence", (string)null);
                });

            modelBuilder.Entity("MeUi.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsSuspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserLoginMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginMethodCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("LoginMethodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("LoginMethodId");

                    b.HasIndex("UserId", "LoginMethodCode")
                        .IsUnique();

                    b.ToTable("UserLoginMethods");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Page", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.PageGroup", "PageGroup")
                        .WithMany("Pages")
                        .HasForeignKey("PageGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PageGroup");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PagePermission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Page", "Page")
                        .WithMany("PagePermissions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Permission", "Permission")
                        .WithMany("PagePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Password", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.UserLoginMethod", "UserLoginMethod")
                        .WithMany()
                        .HasForeignKey("UserLoginMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLoginMethod");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Permission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Action", "Action")
                        .WithMany("Permissions")
                        .HasForeignKey("ActionCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Resource", "Resource")
                        .WithMany("Permissions")
                        .HasForeignKey("ResourceCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantAsn", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.AsnInfo", "AsnInfo")
                        .WithMany()
                        .HasForeignKey("AsnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantUser", "AssignedByTenantUser")
                        .WithMany()
                        .HasForeignKey("AssignedByTenantUserId");

                    b.HasOne("MeUi.Domain.Entities.Tenant", "Tenant")
                        .WithMany("TenantAsns")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsnInfo");

                    b.Navigation("AssignedByTenantUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUser", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Tenant", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserLoginMethod", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.LoginMethod", "LoginMethod")
                        .WithMany()
                        .HasForeignKey("LoginMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantUser", "TenantUser")
                        .WithMany("TenantUserLoginMethods")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoginMethod");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserPassword", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.TenantUserLoginMethod", "TenantUserLoginMethod")
                        .WithOne("TenantUserPassword")
                        .HasForeignKey("MeUi.Domain.Entities.TenantUserPassword", "TenantUserLoginMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TenantUserLoginMethod");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserRefreshToken", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.TenantUser", "TenantUser")
                        .WithMany("TenantUserRefreshTokens")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserRole", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantUser", "TenantUser")
                        .WithMany("TenantUserRoles")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.ThreatIntelligence", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.AsnInfo", "AsnInfo")
                        .WithMany("ThreatIntelligences")
                        .HasForeignKey("AsnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_threat_asn");

                    b.HasOne("MeUi.Domain.Entities.Country", "DestinationCountry")
                        .WithMany("DestinationThreats")
                        .HasForeignKey("DestinationCountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_threat_dest_country");

                    b.HasOne("MeUi.Domain.Entities.MalwareFamily", "MalwareFamily")
                        .WithMany("ThreatIntelligences")
                        .HasForeignKey("MalwareFamilyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_threat_malware_family");

                    b.HasOne("MeUi.Domain.Entities.Protocol", "Protocol")
                        .WithMany("ThreatIntelligences")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_threat_protocol");

                    b.HasOne("MeUi.Domain.Entities.Country", "SourceCountry")
                        .WithMany("SourceThreats")
                        .HasForeignKey("SourceCountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_threat_source_country");

                    b.Navigation("AsnInfo");

                    b.Navigation("DestinationCountry");

                    b.Navigation("MalwareFamily");

                    b.Navigation("Protocol");

                    b.Navigation("SourceCountry");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserLoginMethod", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.LoginMethod", "LoginMethod")
                        .WithMany("UserLoginMethods")
                        .HasForeignKey("LoginMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.User", "User")
                        .WithMany("UserLoginMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoginMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Action", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.AsnInfo", b =>
                {
                    b.Navigation("ThreatIntelligences");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Country", b =>
                {
                    b.Navigation("DestinationThreats");

                    b.Navigation("SourceThreats");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.LoginMethod", b =>
                {
                    b.Navigation("UserLoginMethods");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.MalwareFamily", b =>
                {
                    b.Navigation("ThreatIntelligences");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Page", b =>
                {
                    b.Navigation("PagePermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PageGroup", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Permission", b =>
                {
                    b.Navigation("PagePermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Protocol", b =>
                {
                    b.Navigation("ThreatIntelligences");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("TenantAsns");

                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUser", b =>
                {
                    b.Navigation("TenantUserLoginMethods");

                    b.Navigation("TenantUserRefreshTokens");

                    b.Navigation("TenantUserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserLoginMethod", b =>
                {
                    b.Navigation("TenantUserPassword");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserLoginMethods");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
