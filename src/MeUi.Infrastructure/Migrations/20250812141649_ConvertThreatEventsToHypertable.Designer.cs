// <auto-generated />
using System;
using System.Net;
using MeUi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeUi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250812141649_ConvertThreatEventsToHypertable")]
    partial class ConvertThreatEventsToHypertable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeUi.Domain.Entities.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DeletedAt");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.AsnRegistry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Number");

                    b.ToTable("AsnRegistries");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DeletedAt");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.LoginMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DeletedAt");

                    b.ToTable("LoginMethods");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.MalwareFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name");

                    b.ToTable("MalwareFamilies");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("PageGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PageGroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PageGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DeletedAt");

                    b.ToTable("PageGroups");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PagePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PageId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PagePermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PageTenantPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantPermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PageId");

                    b.HasIndex("TenantPermissionId");

                    b.ToTable("PageTenantPermission");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResourceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActionCode");

                    b.HasIndex("ActionId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ResourceCode", "ActionCode")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Protocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DeletedAt");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactEmail");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantAsnRegistry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AsnRegistryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AsnRegistryId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "AsnRegistryId")
                        .IsUnique();

                    b.ToTable("TenantAsnRegistries");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResourceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActionCode");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("ResourceCode", "ActionCode")
                        .IsUnique();

                    b.ToTable("TenantPermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Name");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantRole");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantRolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantPermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantRoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantPermissionId");

                    b.HasIndex("TenantRoleId");

                    b.ToTable("TenantRolePermission");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantId");

                    b.HasIndex("Email", "TenantId")
                        .IsUnique();

                    b.HasIndex("Username", "TenantId")
                        .IsUnique();

                    b.ToTable("TenantUsers");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserLoginMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginMethodCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TenantUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("LoginMethodCode");

                    b.HasIndex("TenantUserId");

                    b.HasIndex("TenantUserId", "LoginMethodCode")
                        .IsUnique();

                    b.ToTable("TenantUserLoginMethods");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PasswordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantUserLoginMethodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PasswordId");

                    b.HasIndex("TenantUserId");

                    b.HasIndex("TenantUserLoginMethodId");

                    b.ToTable("TenantUserPasswords");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RefreshTokenId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("RefreshTokenId");

                    b.HasIndex("TenantUserId", "RefreshTokenId")
                        .IsUnique();

                    b.ToTable("TenantUserRefreshTokens");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantRoleId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("TenantRoleId");

                    b.HasIndex("TenantRoleId1");

                    b.HasIndex("TenantUserId");

                    b.HasIndex("TenantUserId", "TenantRoleId")
                        .IsUnique();

                    b.ToTable("TenantUserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.ThreatEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AsnRegistryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<IPAddress>("DestinationAddress")
                        .HasColumnType("inet");

                    b.Property<Guid?>("DestinationCountryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DestinationPort")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MalwareFamilyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProtocolId")
                        .HasColumnType("uuid");

                    b.Property<IPAddress>("SourceAddress")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<Guid?>("SourceCountryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("SourcePort")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id", "Timestamp");

                    b.HasIndex("AsnRegistryId");

                    b.HasIndex("Category");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DestinationAddress");

                    b.HasIndex("DestinationCountryId");

                    b.HasIndex("MalwareFamilyId");

                    b.HasIndex("ProtocolId");

                    b.HasIndex("SourceAddress");

                    b.HasIndex("SourceCountryId");

                    b.ToTable("ThreatEvents");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsSuspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("\"Username\" IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserLoginMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginMethodCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("LoginMethodCode");

                    b.HasIndex("UserId", "LoginMethodCode")
                        .IsUnique();

                    b.ToTable("UserLoginMethods");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PasswordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserLoginMethodId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("PasswordId");

                    b.HasIndex("UserLoginMethodId");

                    b.ToTable("UserPasswords");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RefreshTokenId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("RefreshTokenId");

                    b.HasIndex("UserId", "RefreshTokenId")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Page", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.PageGroup", "PageGroup")
                        .WithMany("Pages")
                        .HasForeignKey("PageGroupId");

                    b.Navigation("PageGroup");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PagePermission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Page", "Page")
                        .WithMany("PagePermissions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Permission", "Permission")
                        .WithMany("PagePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PageTenantPermission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Page", "Page")
                        .WithMany("PageTenantPermissions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantPermission", "TenantPermission")
                        .WithMany("PageTenantPermissions")
                        .HasForeignKey("TenantPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("TenantPermission");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Permission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Action", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ActionId");

                    b.HasOne("MeUi.Domain.Entities.Resource", "Resource")
                        .WithMany("Permissions")
                        .HasForeignKey("ResourceCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantAsnRegistry", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.AsnRegistry", "AsnRegistry")
                        .WithMany()
                        .HasForeignKey("AsnRegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Tenant", "Tenant")
                        .WithMany("TenantAsnRegistries")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AsnRegistry");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantPermission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Action", "Action")
                        .WithMany("TenantPermissions")
                        .HasForeignKey("ActionCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Resource", "Resource")
                        .WithMany("TenantPermissions")
                        .HasForeignKey("ResourceCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantRole", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Tenant", "Tenant")
                        .WithMany("TenantRoles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantRolePermission", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.TenantPermission", "TenantPermission")
                        .WithMany("TenantRolePermissions")
                        .HasForeignKey("TenantPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantRole", "TenantRole")
                        .WithMany("TenantRolePermissions")
                        .HasForeignKey("TenantRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TenantPermission");

                    b.Navigation("TenantRole");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUser", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Tenant", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserLoginMethod", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.LoginMethod", "LoginMethod")
                        .WithMany("TenantUserLoginMethods")
                        .HasForeignKey("LoginMethodCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantUser", "TenantUser")
                        .WithMany("TenantUserLoginMethods")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoginMethod");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserPassword", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Password", "Password")
                        .WithMany("TenantUserPasswords")
                        .HasForeignKey("PasswordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantUser", null)
                        .WithMany("TenantUserPasswords")
                        .HasForeignKey("TenantUserId");

                    b.HasOne("MeUi.Domain.Entities.TenantUserLoginMethod", "TenantUserLoginMethod")
                        .WithMany()
                        .HasForeignKey("TenantUserLoginMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Password");

                    b.Navigation("TenantUserLoginMethod");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserRefreshToken", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.RefreshToken", "RefreshToken")
                        .WithMany("TenantUserRefreshTokens")
                        .HasForeignKey("RefreshTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantUser", "TenantUser")
                        .WithMany("TenantUserRefreshTokens")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefreshToken");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUserRole", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.TenantRole", "TenantRole")
                        .WithMany()
                        .HasForeignKey("TenantRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.TenantRole", null)
                        .WithMany("TenantUserRoles")
                        .HasForeignKey("TenantRoleId1");

                    b.HasOne("MeUi.Domain.Entities.TenantUser", "TenantUser")
                        .WithMany("TenantUserRoles")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TenantRole");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.ThreatEvent", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.AsnRegistry", "AsnRegistry")
                        .WithMany("ThreatEvents")
                        .HasForeignKey("AsnRegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.Country", "DestinationCountry")
                        .WithMany("DestinationThreats")
                        .HasForeignKey("DestinationCountryId");

                    b.HasOne("MeUi.Domain.Entities.MalwareFamily", "MalwareFamily")
                        .WithMany("ThreatEvents")
                        .HasForeignKey("MalwareFamilyId");

                    b.HasOne("MeUi.Domain.Entities.Protocol", "Protocol")
                        .WithMany("ThreatEvents")
                        .HasForeignKey("ProtocolId");

                    b.HasOne("MeUi.Domain.Entities.Country", "SourceCountry")
                        .WithMany("SourceThreats")
                        .HasForeignKey("SourceCountryId");

                    b.Navigation("AsnRegistry");

                    b.Navigation("DestinationCountry");

                    b.Navigation("MalwareFamily");

                    b.Navigation("Protocol");

                    b.Navigation("SourceCountry");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserLoginMethod", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.LoginMethod", "LoginMethod")
                        .WithMany("UserLoginMethods")
                        .HasForeignKey("LoginMethodCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.User", "User")
                        .WithMany("UserLoginMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoginMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserPassword", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Password", "Password")
                        .WithMany("UserPasswords")
                        .HasForeignKey("PasswordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.UserLoginMethod", "UserLoginMethod")
                        .WithMany()
                        .HasForeignKey("UserLoginMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Password");

                    b.Navigation("UserLoginMethod");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.RefreshToken", "RefreshToken")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("RefreshTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefreshToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("MeUi.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeUi.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Action", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("TenantPermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.AsnRegistry", b =>
                {
                    b.Navigation("ThreatEvents");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Country", b =>
                {
                    b.Navigation("DestinationThreats");

                    b.Navigation("SourceThreats");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.LoginMethod", b =>
                {
                    b.Navigation("TenantUserLoginMethods");

                    b.Navigation("UserLoginMethods");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.MalwareFamily", b =>
                {
                    b.Navigation("ThreatEvents");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Page", b =>
                {
                    b.Navigation("PagePermissions");

                    b.Navigation("PageTenantPermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.PageGroup", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Password", b =>
                {
                    b.Navigation("TenantUserPasswords");

                    b.Navigation("UserPasswords");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Permission", b =>
                {
                    b.Navigation("PagePermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Protocol", b =>
                {
                    b.Navigation("ThreatEvents");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.RefreshToken", b =>
                {
                    b.Navigation("TenantUserRefreshTokens");

                    b.Navigation("UserRefreshTokens");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("TenantPermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("TenantAsnRegistries");

                    b.Navigation("TenantRoles");

                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantPermission", b =>
                {
                    b.Navigation("PageTenantPermissions");

                    b.Navigation("TenantRolePermissions");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantRole", b =>
                {
                    b.Navigation("TenantRolePermissions");

                    b.Navigation("TenantUserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.TenantUser", b =>
                {
                    b.Navigation("TenantUserLoginMethods");

                    b.Navigation("TenantUserPasswords");

                    b.Navigation("TenantUserRefreshTokens");

                    b.Navigation("TenantUserRoles");
                });

            modelBuilder.Entity("MeUi.Domain.Entities.User", b =>
                {
                    b.Navigation("UserLoginMethods");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
